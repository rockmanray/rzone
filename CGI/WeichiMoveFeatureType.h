#ifndef WEICHIMOVEFEATURETYPE_H
#define WEICHIMOVEFEATURETYPE_H

/*
	for all move feature type
	feature detail see: https://docs.google.com/document/d/1jlNRO1GvUPCsc7yrlUIu_UY-yzg__e94amyUui_Awd4/edit

	!!! Notice that when modify any feature, should check following const variable !!!
*/
enum WeichiMoveFeatureType {
	MF_NOT_IN_CANDIDATE,
	MF_PASS_NEW,							/*======== Pass ========*/
	MF_PASS_CONSECUTIVE,
	MF_CAPTURE_SUCCESS_WITH_DEAD,			/*========== Capture ==========*/
	MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_1,
	MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_2,
	MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_3_TO_5,
	MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_6_TO_10,
	MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_11_OR_MORE,
	MF_CAPTURE_ATTR_SUICIDE,				// previous move is suicide
	MF_CAPTURE_ATTR_PREVENT_CONNECTION,		// prevent connection to previous move
	MF_CAPTURE_ATTR_KO_DECAY_1_TO_5,		// capture ko (less than 5 decay)
	MF_CAPTURE_ATTR_KO_DECAY_MORE_THAN_5,
	MF_ATARI,								/*========== Atari ==========*/
	MF_ATARI_PREV,
	MF_ATARI_ATTR_WITH_KO,
	MF_ATARI_ATTR_DOUBLE,					// double atari (means at least we can get one)
	MF_ATARI_ATTR_WITH_OWN_1LIB,
	MF_KILL_2LIB_UNKNOWN,					/*========== Kill 2-Lib ==========*/
	MF_KILL_2LIB_FAILED,
	MF_KILL_2LIB_SUCCESS_WITH_DEAD,
	MF_KILL_2LIB_SUCCESS_WITH_LIFE_STONE_1,
	MF_KILL_2LIB_SUCCESS_WITH_LIFE_STONE_2,
	MF_KILL_2LIB_SUCCESS_WITH_LIFE_STONE_3_TO_5,
	MF_KILL_2LIB_SUCCESS_WITH_LIFE_STONE_6_TO_10,
	MF_KILL_2LIB_SUCCESS_WITH_LIFE_STONE_11_OR_MORE,
	MF_KILL_2LIB_ATTR_PREV,
	MF_SELF_ATARI_MAKE_NAKADE_SHAPE,		/*======== Self-Atari ========*/
	MF_SELF_ATARI_WITH_KO,
	MF_SELF_ATARI_WITH_ATARI,
	MF_SELF_ATARI_1,						// the move cause one stone in atari (exclude capture ko, capture stone no snapback)
	MF_SELF_ATARI_1_MAKE_KO,
	MF_SELF_ATARI_2,
	MF_SELF_ATARI_MORE_THAN_3,
	MF_KO_EAT_URGENT,						/*======== Ko (position) ========*/
	MF_KO_EAT_IMPORTANT,
	MF_KO_EAT_UNIMPORTANT,
	MF_KO_SAVE_URGENT,						// the ko winner can save own block
	MF_KO_SAVE_IMPORTANT,					// the ko winner can prevent own block atari by opponent
	MF_KO_SAVE_UNIMPORTANT,					// the ko winner will not get any extra bonus
	MF_SAVE_1LIB_UNKNOWN,					/*========== Save 1-Lib ==========*/
	MF_SAVE_1LIB_FAILED_WITH_KO,
	MF_SAVE_1LIB_FAILED_NO_SEARCH,
	MF_SAVE_1LIB_FAILED_BY_SEARCH,
	MF_SAVE_1LIB_SUCCESS_WITH_LIFE,
	MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_1,
	MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_2,
	MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_3_TO_5,
	MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_6_TO_10,
	MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_11_OR_MORE,
	MF_SAVE_1LIB_ATTR_BY_PREV_MOVE,
	MF_SAVE_2LIB_UNKNOWN,					/*========== Save 2-Lib ==========*/
	MF_SAVE_2LIB_FAILED,
	MF_SAVE_2LIB_SUCCESS_WITH_LIFE,
	MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_1,
	MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_2,
	MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_3_TO_5,
	MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_6_TO_10,
	MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_11_OR_MORE,
	MF_SAVE_2LIB_ATTR_BY_PREV_MOVE,
	MF_KILL_OWN_NEW_2LIB_WITH_KO,			/*========== Kill own new 2-Lib ==========*/
	MF_KILL_OWN_NEW_2LIB_STONE_1,
	MF_KILL_OWN_NEW_2LIB_STONE_2,
	MF_KILL_OWN_NEW_2LIB_STONE_3_TO_5,
	MF_KILL_OWN_NEW_2LIB_STONE_6_TO_10,
	MF_KILL_OWN_NEW_2LIB_STONE_11_OR_MORE,
	MF_BLOCK_NEAR_PREV_DECAY,				/*======== Both block decay ========*/
	MF_BLOCK_DECAY_1_TO_5,
	MF_BLOCK_DECAY_6_TO_10,
	MF_BLOCK_DECAY_11_TO_20,
	MF_BLOCK_DECAY_21_OR_MORE,
	MF_DIS_TO_BORDER_1,						/*======== Distance to border ========*/
	MF_DIS_TO_BORDER_2,						// formulas: min(x,y)
	MF_DIS_TO_BORDER_3,
	MF_DIS_TO_BORDER_4,			
	MF_DIS_TO_BORDER_5_OR_MORE,
	MF_LONG_DIS_TO_BORDER_1,				/*======== Distance to long border ========*/
	MF_LONG_DIS_TO_BORDER_2,				// formulas: max(x,y)
	MF_LONG_DIS_TO_BORDER_3,
	MF_LONG_DIS_TO_BORDER_4,
	MF_LONG_DIS_TO_BORDER_5,
	MF_LONG_DIS_TO_BORDER_6,
	MF_LONG_DIS_TO_BORDER_7,
	MF_LONG_DIS_TO_BORDER_8,
	MF_LONG_DIS_TO_BORDER_9,
	MF_LONG_DIS_TO_BORDER_10,
	MF_DIS_TO_PREV_2,						/*======== Distance to previous moves ========*/
	MF_DIS_TO_PREV_3,						// formula: d(dx,dy) = |dx| + |dy| + max(|dx|,|dy|)
	MF_DIS_TO_PREV_4,
	MF_DIS_TO_PREV_5,
	MF_DIS_TO_PREV_6,
	MF_DIS_TO_PREV_7,
	MF_DIS_TO_PREV_8,
	MF_DIS_TO_PREV_9,
	MF_DIS_TO_PREV_10,
	MF_DIS_TO_PREV_11,
	MF_DIS_TO_PREV_12,
	MF_DIS_TO_PREV_13,
	MF_DIS_TO_PREV_14,
	MF_DIS_TO_PREV_15,
	MF_DIS_TO_PREV_16,
	MF_DIS_TO_PREV_17_OR_MORE,
	MF_DIS_TO_PREV_OWN_2,					/*======== Distance to previous own moves ========*/
	MF_DIS_TO_PREV_OWN_3,
	MF_DIS_TO_PREV_OWN_4,
	MF_DIS_TO_PREV_OWN_5,
	MF_DIS_TO_PREV_OWN_6,
	MF_DIS_TO_PREV_OWN_7,
	MF_DIS_TO_PREV_OWN_8,
	MF_DIS_TO_PREV_OWN_9,
	MF_DIS_TO_PREV_OWN_10,
	MF_DIS_TO_PREV_OWN_11,
	MF_DIS_TO_PREV_OWN_12,
	MF_DIS_TO_PREV_OWN_13,
	MF_DIS_TO_PREV_OWN_14,
	MF_DIS_TO_PREV_OWN_15,
	MF_DIS_TO_PREV_OWN_16,
	MF_DIS_TO_PREV_OWN_17_OR_MORE,
	MF_CFG_DIS_TO_PREV_1,					/*======== CFG distance to previous moves ========*/
	MF_CFG_DIS_TO_PREV_2,
	MF_CFG_DIS_TO_PREV_3,
	MF_CFG_DIS_TO_PREV_4_OR_MORE,
	MF_CFG_DIS_TO_PREV_OWN_1,				/*======== CFG distance to previous own moves ========*/
	MF_CFG_DIS_TO_PREV_OWN_2,
	MF_CFG_DIS_TO_PREV_OWN_3,
	MF_CFG_DIS_TO_PREV_OWN_4_OR_MORE,
	MF_PREV_OPP_NAKADE,						/*======== Nakade ========*/
	MF_OPP_NAKADE,
	MF_PREV_OWN_NAKADE,
	MF_OWN_NAKADE,

	MOVE_FEATURE_SIZE	// total size, add new element before this one
};

const int MOVEFEATURE_TYPE_NUM = 25;
const WeichiMoveFeatureType MOVEFEATURE_START_INDEX[MOVEFEATURE_TYPE_NUM] = {
	MF_PASS_NEW,
	MF_CAPTURE_SUCCESS_WITH_DEAD,
	MF_CAPTURE_ATTR_SUICIDE,
	MF_ATARI,
	MF_ATARI_ATTR_WITH_KO,
	MF_ATARI_ATTR_DOUBLE,
	MF_ATARI_ATTR_WITH_OWN_1LIB,
	MF_KILL_2LIB_UNKNOWN,
	MF_KILL_2LIB_ATTR_PREV,
	MF_SELF_ATARI_MAKE_NAKADE_SHAPE,
	MF_KO_EAT_URGENT,
	MF_SAVE_1LIB_UNKNOWN,
	MF_SAVE_1LIB_ATTR_BY_PREV_MOVE,
	MF_SAVE_2LIB_UNKNOWN,
	MF_SAVE_2LIB_ATTR_BY_PREV_MOVE,
	MF_KILL_OWN_NEW_2LIB_WITH_KO,
	MF_BLOCK_NEAR_PREV_DECAY,
	MF_BLOCK_DECAY_1_TO_5,
	MF_DIS_TO_BORDER_1,
	MF_LONG_DIS_TO_BORDER_1,
	MF_DIS_TO_PREV_2,
	MF_DIS_TO_PREV_OWN_2,
	MF_CFG_DIS_TO_PREV_1,
	MF_CFG_DIS_TO_PREV_OWN_1,
	MF_PREV_OPP_NAKADE,
};

const string sMoveFeautreName[MOVE_FEATURE_SIZE] = {
	"MF_NOT_IN_CANDIDATE",
	"MF_PASS_NEW",
	"MF_PASS_CONSECUTIVE",
	"MF_CAPTURE_SUCCESS_WITH_DEAD",
	"MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_1",
	"MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_2",
	"MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_3_TO_5",
	"MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_6_TO_10",
	"MF_CAPTURE_SUCCESS_WITH_LIFE_STONE_11_OR_MORE",
	"MF_CAPTURE_ATTR_SUICIDE",
	"MF_CAPTURE_ATTR_PREVENT_CONNECTION",
	"MF_CAPTURE_ATTR_KO_DECAY_1_TO_5",
	"MF_CAPTURE_ATTR_KO_DECAY_MORE_THAN_5",
	"MF_ATARI",
	"MF_ATARI_PREV",
	"MF_ATARI_ATTR_WITH_KO",
	"MF_ATARI_ATTR_DOUBLE",
	"MF_ATARI_ATTR_WITH_OWN_1LIB",
	"MF_KILL_2LIB_UNKNOWN",
	"MF_KILL_2LIB_FAILED",
	"MF_KILL_2LIB_SUCCESS_WITH_DEAD",
	"MF_KILL_2LIB_SUCCESS_WITH_STONE_1",
	"MF_KILL_2LIB_SUCCESS_WITH_STONE_2",
	"MF_KILL_2LIB_SUCCESS_WITH_STONE_3_TO_5",
	"MF_KILL_2LIB_SUCCESS_WITH_STONE_6_TO_10",
	"MF_KILL_2LIB_SUCCESS_WITH_STONE_11_OR_MORE",
	"MF_KILL_2LIB_ATTR_PREV",
	"MF_SELF_ATARI_MAKE_NAKADE_SHAPE",
	"MF_SELF_ATARI_WITH_KO",
	"MF_SELF_ATARI_WITH_ATARI",
	"MF_SELF_ATARI_1",
	"MF_SELF_ATARI_1_MAKE_KO",
	"MF_SELF_ATARI_2",
	"MF_SELF_ATARI_MORE_THAN_3",
	"MF_KO_EAT_URGENT",
	"MF_KO_EAT_IMPORTANT",
	"MF_KO_EAT_UNIMPORTANT",
	"MF_KO_SAVE_URGENT",
	"MF_KO_SAVE_IMPORTANT",
	"MF_KO_SAVE_UNIMPORTANT",
	"MF_SAVE_1LIB_UNKNOWN",
	"MF_SAVE_1LIB_FAILED_WITH_KO",
	"MF_SAVE_1LIB_FAILED_NO_SEARCH",
	"MF_SAVE_1LIB_FAILED_BY_SEARCH",
	"MF_SAVE_1LIB_SUCCESS_WITH_LIFE",
	"MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_1",
	"MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_2",
	"MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_3_TO_5",
	"MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_6_TO_10",
	"MF_SAVE_1LIB_SUCCESS_WITH_DEAD_STONE_11_OR_MORE",
	"MF_SAVE_1LIB_ATTR_BY_PREV_MOVE",
	"MF_SAVE_2LIB_UNKNOWN",
	"MF_SAVE_2LIB_FAILED",
	"MF_SAVE_2LIB_SUCCESS_WITH_LIFE",
	"MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_1",
	"MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_2",
	"MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_3_TO_5",
	"MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_6_TO_10",
	"MF_SAVE_2LIB_SUCCESS_WITH_DEAD_STONE_11_OR_MORE",
	"MF_SAVE_2LIB_ATTR_BY_PREV_MOVE",
	"MF_KILL_OWN_NEW_2LIB_WITH_KO",
	"MF_KILL_OWN_NEW_2LIB_STONE_1",
	"MF_KILL_OWN_NEW_2LIB_STONE_2",
	"MF_KILL_OWN_NEW_2LIB_STONE_3_TO_5",
	"MF_KILL_OWN_NEW_2LIB_STONE_6_TO_10",
	"MF_KILL_OWN_NEW_2LIB_STONE_11_OR_MORE",
	"MF_BLOCK_NEAR_PREV_DECAY",
	"MF_BLOCK_DECAY_1_TO_5",
	"MF_BLOCK_DECAY_6_TO_10",
	"MF_BLOCK_DECAY_11_TO_20",
	"MF_BLOCK_DECAY_21_OR_MORE",
	"MF_DIS_TO_BORDER_1",
	"MF_DIS_TO_BORDER_2",
	"MF_DIS_TO_BORDER_3",
	"MF_DIS_TO_BORDER_4",
	"MF_DIS_TO_BORDER_5_OR_MORE",
	"MF_LONG_DIS_TO_BORDER_1",
	"MF_LONG_DIS_TO_BORDER_2",
	"MF_LONG_DIS_TO_BORDER_3",
	"MF_LONG_DIS_TO_BORDER_4",
	"MF_LONG_DIS_TO_BORDER_5",
	"MF_LONG_DIS_TO_BORDER_6",
	"MF_LONG_DIS_TO_BORDER_7",
	"MF_LONG_DIS_TO_BORDER_8",
	"MF_LONG_DIS_TO_BORDER_9",
	"MF_LONG_DIS_TO_BORDER_10",
	"MF_DIS_TO_PREV_2",
	"MF_DIS_TO_PREV_3",
	"MF_DIS_TO_PREV_4",
	"MF_DIS_TO_PREV_5",
	"MF_DIS_TO_PREV_6",
	"MF_DIS_TO_PREV_7",
	"MF_DIS_TO_PREV_8",
	"MF_DIS_TO_PREV_9",
	"MF_DIS_TO_PREV_10",
	"MF_DIS_TO_PREV_11",
	"MF_DIS_TO_PREV_12",
	"MF_DIS_TO_PREV_13",
	"MF_DIS_TO_PREV_14",
	"MF_DIS_TO_PREV_15",
	"MF_DIS_TO_PREV_16",
	"MF_DIS_TO_PREV_17_OR_MORE",
	"MF_DIS_TO_PREV_OWN_2",
	"MF_DIS_TO_PREV_OWN_3",
	"MF_DIS_TO_PREV_OWN_4",
	"MF_DIS_TO_PREV_OWN_5",
	"MF_DIS_TO_PREV_OWN_6",
	"MF_DIS_TO_PREV_OWN_7",
	"MF_DIS_TO_PREV_OWN_8",
	"MF_DIS_TO_PREV_OWN_9",
	"MF_DIS_TO_PREV_OWN_10",
	"MF_DIS_TO_PREV_OWN_11",
	"MF_DIS_TO_PREV_OWN_12",
	"MF_DIS_TO_PREV_OWN_13",
	"MF_DIS_TO_PREV_OWN_14",
	"MF_DIS_TO_PREV_OWN_15",
	"MF_DIS_TO_PREV_OWN_16",
	"MF_DIS_TO_PREV_OWN_17_OR_MORE",
	"MF_CFG_DIS_TO_PREV_1",
	"MF_CFG_DIS_TO_PREV_2",
	"MF_CFG_DIS_TO_PREV_3",
	"MF_CFG_DIS_TO_PREV_4_OR_MORE",
	"MF_CFG_DIS_TO_PREV_OWN_1",
	"MF_CFG_DIS_TO_PREV_OWN_2",
	"MF_CFG_DIS_TO_PREV_OWN_3",
	"MF_CFG_DIS_TO_PREV_OWN_4_OR_MORE",
	"MF_PREV_OPP_NAKADE",
	"MF_OPP_NAKADE",
	"MF_PREV_OWN_NAKADE",
	"MF_OWN_NAKADE",
};

inline string getWeichiMoveFeatureTypeName( WeichiMoveFeatureType type ) { return sMoveFeautreName[type]; }

#endif